// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package client

import (
	"fmt"
	"io"
	"strconv"
)

type Alias struct {
	ID      string  `json:"id"`
	Ipfs    *string `json:"ipfs,omitempty"`
	Address string  `json:"address"`
	Alias   string  `json:"alias"`
	Created int64   `json:"created"`
}

type AliasWhere struct {
	ID         *string   `json:"id,omitempty"`
	IDIn       []*string `json:"id_in,omitempty"`
	Ipfs       *string   `json:"ipfs,omitempty"`
	IpfsIn     []*string `json:"ipfs_in,omitempty"`
	Address    *string   `json:"address,omitempty"`
	AddressIn  []*string `json:"address_in,omitempty"`
	Alias      *string   `json:"alias,omitempty"`
	AliasIn    []*string `json:"alias_in,omitempty"`
	Created    *int64    `json:"created,omitempty"`
	CreatedIn  []*int64  `json:"created_in,omitempty"`
	CreatedGt  *int64    `json:"created_gt,omitempty"`
	CreatedGte *int64    `json:"created_gte,omitempty"`
	CreatedLt  *int64    `json:"created_lt,omitempty"`
	CreatedLte *int64    `json:"created_lte,omitempty"`
}

type DelegationPortal struct {
	DelegationType     string `json:"delegationType"`
	DelegationContract string `json:"delegationContract"`
	DelegationAPI      string `json:"delegationApi"`
}

type Follow struct {
	ID       string  `json:"id"`
	Ipfs     *string `json:"ipfs,omitempty"`
	Follower string  `json:"follower"`
	Space    Space   `json:"space"`
	Created  int64   `json:"created"`
}

type FollowWhere struct {
	ID         *string   `json:"id,omitempty"`
	IDIn       []*string `json:"id_in,omitempty"`
	Ipfs       *string   `json:"ipfs,omitempty"`
	IpfsIn     []*string `json:"ipfs_in,omitempty"`
	Follower   *string   `json:"follower,omitempty"`
	FollowerIn []*string `json:"follower_in,omitempty"`
	Space      *string   `json:"space,omitempty"`
	SpaceIn    []*string `json:"space_in,omitempty"`
	Created    *int64    `json:"created,omitempty"`
	CreatedIn  []*int64  `json:"created_in,omitempty"`
	CreatedGt  *int64    `json:"created_gt,omitempty"`
	CreatedGte *int64    `json:"created_gte,omitempty"`
	CreatedLt  *int64    `json:"created_lt,omitempty"`
	CreatedLte *int64    `json:"created_lte,omitempty"`
}

type Item struct {
	ID          string `json:"id"`
	SpacesCount *int64 `json:"spacesCount,omitempty"`
}

type Message struct {
	Mci       *int64  `json:"mci,omitempty"`
	ID        *string `json:"id,omitempty"`
	Ipfs      *string `json:"ipfs,omitempty"`
	Address   *string `json:"address,omitempty"`
	Version   *string `json:"version,omitempty"`
	Timestamp *int64  `json:"timestamp,omitempty"`
	Space     *string `json:"space,omitempty"`
	Type      *string `json:"type,omitempty"`
	Sig       *string `json:"sig,omitempty"`
	Receipt   *string `json:"receipt,omitempty"`
}

type MessageWhere struct {
	ID           *string   `json:"id,omitempty"`
	IDIn         []*string `json:"id_in,omitempty"`
	Mci          *int64    `json:"mci,omitempty"`
	MciIn        []*int64  `json:"mci_in,omitempty"`
	MciGt        *int64    `json:"mci_gt,omitempty"`
	MciGte       *int64    `json:"mci_gte,omitempty"`
	MciLt        *int64    `json:"mci_lt,omitempty"`
	MciLte       *int64    `json:"mci_lte,omitempty"`
	Address      *string   `json:"address,omitempty"`
	AddressIn    []*string `json:"address_in,omitempty"`
	Timestamp    *int64    `json:"timestamp,omitempty"`
	TimestampIn  []*int64  `json:"timestamp_in,omitempty"`
	TimestampGt  *int64    `json:"timestamp_gt,omitempty"`
	TimestampGte *int64    `json:"timestamp_gte,omitempty"`
	TimestampLt  *int64    `json:"timestamp_lt,omitempty"`
	TimestampLte *int64    `json:"timestamp_lte,omitempty"`
	Space        *string   `json:"space,omitempty"`
	SpaceIn      []*string `json:"space_in,omitempty"`
	Type         *string   `json:"type,omitempty"`
	TypeIn       []*string `json:"type_in,omitempty"`
}

type Metrics struct {
	Total      *int64                 `json:"total,omitempty"`
	Categories map[string]interface{} `json:"categories,omitempty"`
}

type Proposal struct {
	ID               string                 `json:"id"`
	Ipfs             *string                `json:"ipfs,omitempty"`
	Author           string                 `json:"author"`
	Created          int64                  `json:"created"`
	Updated          *int64                 `json:"updated,omitempty"`
	Space            *Space                 `json:"space,omitempty"`
	Network          string                 `json:"network"`
	Symbol           string                 `json:"symbol"`
	Type             *string                `json:"type,omitempty"`
	Strategies       []*Strategy            `json:"strategies"`
	Validation       *Validation            `json:"validation,omitempty"`
	Plugins          map[string]interface{} `json:"plugins"`
	Title            string                 `json:"title"`
	Body             *string                `json:"body,omitempty"`
	Discussion       string                 `json:"discussion"`
	Choices          []*string              `json:"choices"`
	Start            int64                  `json:"start"`
	End              int64                  `json:"end"`
	Quorum           float64                `json:"quorum"`
	Privacy          *string                `json:"privacy,omitempty"`
	Snapshot         *string                `json:"snapshot,omitempty"`
	State            *string                `json:"state,omitempty"`
	Link             *string                `json:"link,omitempty"`
	App              *string                `json:"app,omitempty"`
	Scores           []*float64             `json:"scores,omitempty"`
	ScoresByStrategy map[string]interface{} `json:"scores_by_strategy,omitempty"`
	ScoresState      *string                `json:"scores_state,omitempty"`
	ScoresTotal      *float64               `json:"scores_total,omitempty"`
	ScoresUpdated    *int64                 `json:"scores_updated,omitempty"`
	Votes            *int64                 `json:"votes,omitempty"`
	Flagged          *bool                  `json:"flagged,omitempty"`
}

type ProposalWhere struct {
	ID                 *string   `json:"id,omitempty"`
	IDIn               []*string `json:"id_in,omitempty"`
	Ipfs               *string   `json:"ipfs,omitempty"`
	IpfsIn             []*string `json:"ipfs_in,omitempty"`
	Space              *string   `json:"space,omitempty"`
	SpaceIn            []*string `json:"space_in,omitempty"`
	Author             *string   `json:"author,omitempty"`
	AuthorIn           []*string `json:"author_in,omitempty"`
	Network            *string   `json:"network,omitempty"`
	NetworkIn          []*string `json:"network_in,omitempty"`
	TitleContains      *string   `json:"title_contains,omitempty"`
	StrategiesContains *string   `json:"strategies_contains,omitempty"`
	PluginsContains    *string   `json:"plugins_contains,omitempty"`
	Validation         *string   `json:"validation,omitempty"`
	Type               *string   `json:"type,omitempty"`
	TypeIn             []*string `json:"type_in,omitempty"`
	App                *string   `json:"app,omitempty"`
	AppNot             *string   `json:"app_not,omitempty"`
	AppIn              []*string `json:"app_in,omitempty"`
	AppNotIn           []*string `json:"app_not_in,omitempty"`
	Created            *int64    `json:"created,omitempty"`
	CreatedIn          []*int64  `json:"created_in,omitempty"`
	CreatedGt          *int64    `json:"created_gt,omitempty"`
	CreatedGte         *int64    `json:"created_gte,omitempty"`
	CreatedLt          *int64    `json:"created_lt,omitempty"`
	CreatedLte         *int64    `json:"created_lte,omitempty"`
	Updated            *int64    `json:"updated,omitempty"`
	UpdatedIn          []*int64  `json:"updated_in,omitempty"`
	UpdatedGt          *int64    `json:"updated_gt,omitempty"`
	UpdatedGte         *int64    `json:"updated_gte,omitempty"`
	UpdatedLt          *int64    `json:"updated_lt,omitempty"`
	UpdatedLte         *int64    `json:"updated_lte,omitempty"`
	Start              *int64    `json:"start,omitempty"`
	StartIn            []*int64  `json:"start_in,omitempty"`
	StartGt            *int64    `json:"start_gt,omitempty"`
	StartGte           *int64    `json:"start_gte,omitempty"`
	StartLt            *int64    `json:"start_lt,omitempty"`
	StartLte           *int64    `json:"start_lte,omitempty"`
	End                *int64    `json:"end,omitempty"`
	EndIn              []*int64  `json:"end_in,omitempty"`
	EndGt              *int64    `json:"end_gt,omitempty"`
	EndGte             *int64    `json:"end_gte,omitempty"`
	EndLt              *int64    `json:"end_lt,omitempty"`
	EndLte             *int64    `json:"end_lte,omitempty"`
	ScoresState        *string   `json:"scores_state,omitempty"`
	ScoresStateIn      []*string `json:"scores_state_in,omitempty"`
	State              *string   `json:"state,omitempty"`
	SpaceVerified      *bool     `json:"space_verified,omitempty"`
	Flagged            *bool     `json:"flagged,omitempty"`
}

type RankingObject struct {
	Items   []*Space `json:"items,omitempty"`
	Metrics *Metrics `json:"metrics,omitempty"`
}

type RankingWhere struct {
	ID       *string   `json:"id,omitempty"`
	IDIn     []*string `json:"id_in,omitempty"`
	Search   *string   `json:"search,omitempty"`
	Category *string   `json:"category,omitempty"`
	Network  *string   `json:"network,omitempty"`
}

type Role struct {
	Space       *string   `json:"space,omitempty"`
	Permissions []*string `json:"permissions,omitempty"`
}

type RolesWhere struct {
	Address *string `json:"address,omitempty"`
}

type Space struct {
	ID               string                 `json:"id"`
	Name             *string                `json:"name,omitempty"`
	Private          *bool                  `json:"private,omitempty"`
	About            *string                `json:"about,omitempty"`
	Avatar           *string                `json:"avatar,omitempty"`
	Terms            *string                `json:"terms,omitempty"`
	Location         *string                `json:"location,omitempty"`
	Website          *string                `json:"website,omitempty"`
	Twitter          *string                `json:"twitter,omitempty"`
	Github           *string                `json:"github,omitempty"`
	Coingecko        *string                `json:"coingecko,omitempty"`
	Email            *string                `json:"email,omitempty"`
	Network          *string                `json:"network,omitempty"`
	Symbol           *string                `json:"symbol,omitempty"`
	Skin             *string                `json:"skin,omitempty"`
	Domain           *string                `json:"domain,omitempty"`
	Strategies       []*Strategy            `json:"strategies,omitempty"`
	Admins           []*string              `json:"admins,omitempty"`
	Members          []*string              `json:"members,omitempty"`
	Moderators       []*string              `json:"moderators,omitempty"`
	Filters          *SpaceFilters          `json:"filters,omitempty"`
	Plugins          map[string]interface{} `json:"plugins,omitempty"`
	Voting           *SpaceVoting           `json:"voting,omitempty"`
	Categories       []*string              `json:"categories,omitempty"`
	Validation       *Validation            `json:"validation,omitempty"`
	VoteValidation   *Validation            `json:"voteValidation,omitempty"`
	DelegationPortal *DelegationPortal      `json:"delegationPortal,omitempty"`
	Treasuries       []*Treasury            `json:"treasuries,omitempty"`
	ActiveProposals  *int64                 `json:"activeProposals,omitempty"`
	ProposalsCount   *int64                 `json:"proposalsCount,omitempty"`
	ProposalsCount7d *int64                 `json:"proposalsCount7d,omitempty"`
	FollowersCount   *int64                 `json:"followersCount,omitempty"`
	FollowersCount7d *int64                 `json:"followersCount7d,omitempty"`
	VotesCount       *int64                 `json:"votesCount,omitempty"`
	VotesCount7d     *int64                 `json:"votesCount7d,omitempty"`
	Parent           *Space                 `json:"parent,omitempty"`
	Children         []*Space               `json:"children,omitempty"`
	Guidelines       *string                `json:"guidelines,omitempty"`
	Template         *string                `json:"template,omitempty"`
	Verified         *bool                  `json:"verified,omitempty"`
	Flagged          *bool                  `json:"flagged,omitempty"`
	Hibernated       *bool                  `json:"hibernated,omitempty"`
	Turbo            *bool                  `json:"turbo,omitempty"`
	Rank             *float64               `json:"rank,omitempty"`
	Created          int64                  `json:"created"`
}

type SpaceFilters struct {
	MinScore    *float64 `json:"minScore,omitempty"`
	OnlyMembers *bool    `json:"onlyMembers,omitempty"`
}

type SpaceVoting struct {
	Delay       *int64   `json:"delay,omitempty"`
	Period      *int64   `json:"period,omitempty"`
	Type        *string  `json:"type,omitempty"`
	Quorum      *float64 `json:"quorum,omitempty"`
	Blind       *bool    `json:"blind,omitempty"`
	HideAbstain *bool    `json:"hideAbstain,omitempty"`
	Privacy     *string  `json:"privacy,omitempty"`
	Aliased     *bool    `json:"aliased,omitempty"`
}

type SpaceWhere struct {
	ID         *string   `json:"id,omitempty"`
	IDIn       []*string `json:"id_in,omitempty"`
	Created    *int64    `json:"created,omitempty"`
	CreatedIn  []*int64  `json:"created_in,omitempty"`
	CreatedGt  *int64    `json:"created_gt,omitempty"`
	CreatedGte *int64    `json:"created_gte,omitempty"`
	CreatedLt  *int64    `json:"created_lt,omitempty"`
	CreatedLte *int64    `json:"created_lte,omitempty"`
}

type Statement struct {
	ID        string  `json:"id"`
	Ipfs      string  `json:"ipfs"`
	Space     string  `json:"space"`
	About     *string `json:"about,omitempty"`
	Delegate  *string `json:"delegate,omitempty"`
	Statement *string `json:"statement,omitempty"`
	Created   int64   `json:"created"`
	Updated   int64   `json:"updated"`
}

type StatementsWhere struct {
	ID         *string   `json:"id,omitempty"`
	IDIn       []*string `json:"id_in,omitempty"`
	Ipfs       *string   `json:"ipfs,omitempty"`
	IpfsIn     []*string `json:"ipfs_in,omitempty"`
	Space      *string   `json:"space,omitempty"`
	SpaceIn    []*string `json:"space_in,omitempty"`
	Delegate   *string   `json:"delegate,omitempty"`
	DelegateIn []*string `json:"delegate_in,omitempty"`
	Created    *int64    `json:"created,omitempty"`
	CreatedIn  []*int64  `json:"created_in,omitempty"`
	CreatedGt  *int64    `json:"created_gt,omitempty"`
	CreatedGte *int64    `json:"created_gte,omitempty"`
	CreatedLt  *int64    `json:"created_lt,omitempty"`
	CreatedLte *int64    `json:"created_lte,omitempty"`
}

type Strategy struct {
	Name    string                 `json:"name"`
	Network *string                `json:"network,omitempty"`
	Params  map[string]interface{} `json:"params,omitempty"`
}

type StrategyItem struct {
	ID          string                   `json:"id"`
	Author      *string                  `json:"author,omitempty"`
	Version     *string                  `json:"version,omitempty"`
	Schema      map[string]interface{}   `json:"schema,omitempty"`
	Examples    []map[string]interface{} `json:"examples,omitempty"`
	About       *string                  `json:"about,omitempty"`
	SpacesCount *int64                   `json:"spacesCount,omitempty"`
}

type Subscription struct {
	ID      string  `json:"id"`
	Ipfs    *string `json:"ipfs,omitempty"`
	Address string  `json:"address"`
	Space   Space   `json:"space"`
	Created int64   `json:"created"`
}

type SubscriptionWhere struct {
	ID         *string   `json:"id,omitempty"`
	IDIn       []*string `json:"id_in,omitempty"`
	Ipfs       *string   `json:"ipfs,omitempty"`
	IpfsIn     []*string `json:"ipfs_in,omitempty"`
	Address    *string   `json:"address,omitempty"`
	AddressIn  []*string `json:"address_in,omitempty"`
	Space      *string   `json:"space,omitempty"`
	SpaceIn    []*string `json:"space_in,omitempty"`
	Created    *int64    `json:"created,omitempty"`
	CreatedIn  []*int64  `json:"created_in,omitempty"`
	CreatedGt  *int64    `json:"created_gt,omitempty"`
	CreatedGte *int64    `json:"created_gte,omitempty"`
	CreatedLt  *int64    `json:"created_lt,omitempty"`
	CreatedLte *int64    `json:"created_lte,omitempty"`
}

type Treasury struct {
	Name    *string `json:"name,omitempty"`
	Address *string `json:"address,omitempty"`
	Network *string `json:"network,omitempty"`
}

type User struct {
	ID      string  `json:"id"`
	Ipfs    *string `json:"ipfs,omitempty"`
	Name    *string `json:"name,omitempty"`
	About   *string `json:"about,omitempty"`
	Avatar  *string `json:"avatar,omitempty"`
	Created int64   `json:"created"`
}

type UsersWhere struct {
	ID         *string   `json:"id,omitempty"`
	IDIn       []*string `json:"id_in,omitempty"`
	Ipfs       *string   `json:"ipfs,omitempty"`
	IpfsIn     []*string `json:"ipfs_in,omitempty"`
	Created    *int64    `json:"created,omitempty"`
	CreatedIn  []*int64  `json:"created_in,omitempty"`
	CreatedGt  *int64    `json:"created_gt,omitempty"`
	CreatedGte *int64    `json:"created_gte,omitempty"`
	CreatedLt  *int64    `json:"created_lt,omitempty"`
	CreatedLte *int64    `json:"created_lte,omitempty"`
}

type Validation struct {
	Name   string                 `json:"name"`
	Params map[string]interface{} `json:"params,omitempty"`
}

type Vote struct {
	ID           string                 `json:"id"`
	Ipfs         *string                `json:"ipfs,omitempty"`
	Voter        string                 `json:"voter"`
	Created      int64                  `json:"created"`
	Space        Space                  `json:"space"`
	Proposal     *Proposal              `json:"proposal,omitempty"`
	Choice       map[string]interface{} `json:"choice"`
	Metadata     map[string]interface{} `json:"metadata,omitempty"`
	Reason       *string                `json:"reason,omitempty"`
	App          *string                `json:"app,omitempty"`
	Vp           *float64               `json:"vp,omitempty"`
	VpByStrategy []*float64             `json:"vp_by_strategy,omitempty"`
	VpState      *string                `json:"vp_state,omitempty"`
}

type VoteWhere struct {
	ID          *string    `json:"id,omitempty"`
	IDIn        []*string  `json:"id_in,omitempty"`
	Ipfs        *string    `json:"ipfs,omitempty"`
	IpfsIn      []*string  `json:"ipfs_in,omitempty"`
	Space       *string    `json:"space,omitempty"`
	SpaceIn     []*string  `json:"space_in,omitempty"`
	Voter       *string    `json:"voter,omitempty"`
	VoterIn     []*string  `json:"voter_in,omitempty"`
	Proposal    *string    `json:"proposal,omitempty"`
	ProposalIn  []*string  `json:"proposal_in,omitempty"`
	Reason      *string    `json:"reason,omitempty"`
	ReasonNot   *string    `json:"reason_not,omitempty"`
	ReasonIn    []*string  `json:"reason_in,omitempty"`
	ReasonNotIn []*string  `json:"reason_not_in,omitempty"`
	App         *string    `json:"app,omitempty"`
	AppNot      *string    `json:"app_not,omitempty"`
	AppIn       []*string  `json:"app_in,omitempty"`
	AppNotIn    []*string  `json:"app_not_in,omitempty"`
	Created     *int64     `json:"created,omitempty"`
	CreatedIn   []*int64   `json:"created_in,omitempty"`
	CreatedGt   *int64     `json:"created_gt,omitempty"`
	CreatedGte  *int64     `json:"created_gte,omitempty"`
	CreatedLt   *int64     `json:"created_lt,omitempty"`
	CreatedLte  *int64     `json:"created_lte,omitempty"`
	Vp          *float64   `json:"vp,omitempty"`
	VpIn        []*float64 `json:"vp_in,omitempty"`
	VpGt        *float64   `json:"vp_gt,omitempty"`
	VpGte       *float64   `json:"vp_gte,omitempty"`
	VpLt        *float64   `json:"vp_lt,omitempty"`
	VpLte       *float64   `json:"vp_lte,omitempty"`
	VpState     *string    `json:"vp_state,omitempty"`
	VpStateIn   []*string  `json:"vp_state_in,omitempty"`
}

type Vp struct {
	Vp           *float64   `json:"vp,omitempty"`
	VpByStrategy []*float64 `json:"vp_by_strategy,omitempty"`
	VpState      *string    `json:"vp_state,omitempty"`
}

type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "asc"
	OrderDirectionDesc OrderDirection = "desc"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
